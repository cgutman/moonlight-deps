From 8580dafe7956e86e5995fed23521a5c67bef5292 Mon Sep 17 00:00:00 2001
From: Cameron Gutman <aicommander@gmail.com>
Date: Tue, 30 Jul 2024 21:02:28 -0500
Subject: [PATCH] avcodec/dxva2: add support for new HEVC RExt DXVA profiles

Signed-off-by: Cameron Gutman <aicommander@gmail.com>
---
 libavcodec/dxva2.c          | 20 ++++++++++++++
 libavcodec/dxva2_hevc.c     | 52 ++++++++++++++++++++++++++++++-------
 libavcodec/dxva2_internal.h | 37 +++++++++++++++++++++++++-
 libavcodec/hevc/hevcdec.c   | 16 ++++++++++++
 4 files changed, 114 insertions(+), 11 deletions(-)

diff --git a/libavcodec/dxva2.c b/libavcodec/dxva2.c
index 22ecd5acaf..3a3845d775 100644
--- a/libavcodec/dxva2.c
+++ b/libavcodec/dxva2.c
@@ -44,6 +44,14 @@ DEFINE_GUID(ff_DXVA2_ModeVC1_D,          0x1b81beA3, 0xa0c7,0x11d3,0xb9,0x84,0x0
 DEFINE_GUID(ff_DXVA2_ModeVC1_D2010,      0x1b81beA4, 0xa0c7,0x11d3,0xb9,0x84,0x00,0xc0,0x4f,0x2e,0x73,0xc5);
 DEFINE_GUID(ff_DXVA2_ModeHEVC_VLD_Main,  0x5b11d51b, 0x2f4c,0x4452,0xbc,0xc3,0x09,0xf2,0xa1,0x16,0x0c,0xc0);
 DEFINE_GUID(ff_DXVA2_ModeHEVC_VLD_Main10,0x107af0e0, 0xef1a,0x4d19,0xab,0xa8,0x67,0xa1,0x63,0x07,0x3d,0x13);
+DEFINE_GUID(ff_DXVA2_ModeHEVC_VLD_Main12,     0x1a72925f, 0x0c2c,0x4f15,0x96,0xfb,0xb1,0x7d,0x14,0x73,0x60,0x3f);
+DEFINE_GUID(ff_DXVA2_ModeHEVC_VLD_Main10_422, 0x0bac4fe5, 0x1532,0x4429,0xa8,0x54,0xf8,0x4d,0xe0,0x49,0x53,0xdb);
+DEFINE_GUID(ff_DXVA2_ModeHEVC_VLD_Main12_422, 0x55bcac81, 0xf311,0x4093,0xa7,0xd0,0x1c,0xbc,0x0b,0x84,0x9b,0xee);
+DEFINE_GUID(ff_DXVA2_ModeHEVC_VLD_Main_444,   0x4008018f, 0xf537,0x4b36,0x98,0xcf,0x61,0xaf,0x8a,0x2c,0x1a,0x33);
+DEFINE_GUID(ff_DXVA2_ModeHEVC_VLD_Main10_Ext, 0x9cc55490, 0xe37c,0x4932,0x86,0x84,0x49,0x20,0xf9,0xf6,0x40,0x9c);
+DEFINE_GUID(ff_DXVA2_ModeHEVC_VLD_Main10_444, 0x0dabeffa, 0x4458,0x4602,0xbc,0x03,0x07,0x95,0x65,0x9d,0x61,0x7c);
+DEFINE_GUID(ff_DXVA2_ModeHEVC_VLD_Main12_444, 0x9798634d, 0xfe9d,0x48e5,0xb4,0xda,0xdb,0xec,0x45,0xb3,0xdf,0x01);
+DEFINE_GUID(ff_DXVA2_ModeHEVC_VLD_Main16,     0xa4fbdbb0, 0xa113,0x482b,0xa2,0x32,0x63,0x5c,0xc0,0x69,0x7f,0x6d);
 DEFINE_GUID(ff_DXVA2_ModeVP9_VLD_Profile0,0x463707f8,0xa1d0,0x4585,0x87,0x6d,0x83,0xaa,0x6d,0x60,0xb8,0x9e);
 DEFINE_GUID(ff_DXVA2_ModeVP9_VLD_10bit_Profile2,0xa4c749ef,0x6ecf,0x48aa,0x84,0x48,0x50,0xa7,0xa1,0x16,0x5f,0xf7);
 DEFINE_GUID(ff_DXVA2_ModeAV1_VLD_Profile0,0xb8be4ccb,0xcf53,0x46ba,0x8d,0x59,0xd6,0xb8,0xa6,0xda,0x5d,0x2a);
@@ -70,6 +78,8 @@ static const int prof_hevc_main[]    = {AV_PROFILE_HEVC_MAIN,
                                         AV_PROFILE_UNKNOWN};
 static const int prof_hevc_main10[]  = {AV_PROFILE_HEVC_MAIN_10,
                                         AV_PROFILE_UNKNOWN};
+static const int prof_hevc_rext[]    = {AV_PROFILE_HEVC_REXT,
+                                        AV_PROFILE_UNKNOWN};
 static const int prof_vp9_profile0[] = {AV_PROFILE_VP9_0,
                                         AV_PROFILE_UNKNOWN};
 static const int prof_vp9_profile2[] = {AV_PROFILE_VP9_2,
@@ -98,6 +108,9 @@ static const dxva_mode dxva_modes[] = {
     { &ff_DXVA2_ModeHEVC_VLD_Main10, AV_CODEC_ID_HEVC, prof_hevc_main10 },
     { &ff_DXVA2_ModeHEVC_VLD_Main,   AV_CODEC_ID_HEVC, prof_hevc_main },
 
+    /* TODO: Proper detection */
+    { &ff_DXVA2_ModeHEVC_VLD_Main10_444, AV_CODEC_ID_HEVC, prof_hevc_rext },
+
     /* VP8/9 */
     { &ff_DXVA2_ModeVP9_VLD_Profile0,       AV_CODEC_ID_VP9, prof_vp9_profile0 },
     { &ff_DXVA2_ModeVP9_VLD_10bit_Profile2, AV_CODEC_ID_VP9, prof_vp9_profile2 },
@@ -459,6 +472,13 @@ static DXGI_FORMAT d3d11va_map_sw_to_hw_format(enum AVPixelFormat pix_fmt)
     case AV_PIX_FMT_NV12:       return DXGI_FORMAT_NV12;
     case AV_PIX_FMT_P010:       return DXGI_FORMAT_P010;
     case AV_PIX_FMT_YUV420P:    return DXGI_FORMAT_420_OPAQUE;
+    case AV_PIX_FMT_VUYX:       return DXGI_FORMAT_AYUV;
+    case AV_PIX_FMT_YUYV422:    return DXGI_FORMAT_YUY2;
+    case AV_PIX_FMT_Y210:       return DXGI_FORMAT_Y210;
+    case AV_PIX_FMT_XV30:       return DXGI_FORMAT_Y410;
+    case AV_PIX_FMT_P012:       return DXGI_FORMAT_P016;
+    case AV_PIX_FMT_Y212:       return DXGI_FORMAT_Y216;
+    case AV_PIX_FMT_XV36:       return DXGI_FORMAT_Y416;
     default:                    return DXGI_FORMAT_UNKNOWN;
     }
 }
diff --git a/libavcodec/dxva2_hevc.c b/libavcodec/dxva2_hevc.c
index d01d1e76e8..d4deaa6df7 100644
--- a/libavcodec/dxva2_hevc.c
+++ b/libavcodec/dxva2_hevc.c
@@ -32,12 +32,15 @@
 #define MAX_SLICES 256
 
 struct hevc_dxva2_picture_context {
-    DXVA_PicParams_HEVC   pp;
-    DXVA_Qmatrix_HEVC     qm;
-    unsigned              slice_count;
-    DXVA_Slice_HEVC_Short slice_short[MAX_SLICES];
-    const uint8_t         *bitstream;
-    unsigned              bitstream_size;
+    union {
+        DXVA_PicParams_HEVC             pp;
+        ff_DXVA_PicParams_HEVC_RangeExt ppext;
+    };
+    DXVA_Qmatrix_HEVC               qm;
+    unsigned                        slice_count;
+    DXVA_Slice_HEVC_Short           slice_short[MAX_SLICES];
+    const uint8_t                   *bitstream;
+    unsigned                        bitstream_size;
 };
 
 static void fill_picture_entry(DXVA_PicEntry_HEVC *pic,
@@ -58,8 +61,9 @@ static int get_refpic_index(const DXVA_PicParams_HEVC *pp, int surface_index)
 }
 
 void ff_dxva2_hevc_fill_picture_parameters(const AVCodecContext *avctx, AVDXVAContext *ctx,
-                                    DXVA_PicParams_HEVC *pp)
+                                           ff_DXVA_PicParams_HEVC_RangeExt *ppext)
 {
+    DXVA_PicParams_HEVC *pp = &ppext->params;
     const HEVCContext *h = avctx->priv_data;
     const HEVCLayerContext *l = &h->layers[h->cur_layer];
     const HEVCFrame *current_picture = h->cur_frame;
@@ -67,7 +71,7 @@ void ff_dxva2_hevc_fill_picture_parameters(const AVCodecContext *avctx, AVDXVACo
     const HEVCSPS *sps = pps->sps;
     int i, j;
 
-    memset(pp, 0, sizeof(*pp));
+    memset(ppext, 0, sizeof(*ppext));
 
     pp->PicWidthInMinCbsY  = sps->min_cb_width;
     pp->PicHeightInMinCbsY = sps->min_cb_height;
@@ -200,6 +204,32 @@ void ff_dxva2_hevc_fill_picture_parameters(const AVCodecContext *avctx, AVDXVACo
     DO_REF_LIST(LT_CURR, RefPicSetLtCurr);
 
     pp->StatusReportFeedbackNumber = 1 + DXVA_CONTEXT_REPORT_ID(avctx, ctx)++;
+
+    if (sps->range_extension) {
+        ppext->transform_skip_rotation_enabled_flag    = sps->transform_skip_rotation_enabled;
+        ppext->transform_skip_context_enabled_flag     = sps->transform_skip_context_enabled;
+        ppext->implicit_rdpcm_enabled_flag             = sps->implicit_rdpcm_enabled;
+        ppext->explicit_rdpcm_enabled_flag             = sps->explicit_rdpcm_enabled;
+        ppext->extended_precision_processing_flag      = sps->extended_precision_processing;
+        ppext->intra_smoothing_disabled_flag           = sps->intra_smoothing_disabled;
+        ppext->persistent_rice_adaptation_enabled_flag = sps->persistent_rice_adaptation_enabled;
+        ppext->high_precision_offsets_enabled_flag     = sps->high_precision_offsets_enabled;
+        ppext->cabac_bypass_alignment_enabled_flag     = sps->cabac_bypass_alignment_enabled;
+    }
+    if (pps->pps_range_extensions_flag) {
+        ppext->cross_component_prediction_enabled_flag = pps->cross_component_prediction_enabled_flag;
+        ppext->chroma_qp_offset_list_enabled_flag      = pps->chroma_qp_offset_list_enabled_flag;
+
+        ppext->diff_cu_chroma_qp_offset_depth            = pps->diff_cu_chroma_qp_offset_depth;
+        ppext->log2_sao_offset_scale_luma                = pps->log2_sao_offset_scale_luma;
+        ppext->log2_sao_offset_scale_chroma              = pps->log2_sao_offset_scale_chroma;
+        ppext->log2_max_transform_skip_block_size_minus2 = pps->log2_max_transform_skip_block_size - 2;
+        ppext->chroma_qp_offset_list_len_minus1          = pps->chroma_qp_offset_list_len_minus1;
+        for (i = 0; i <= pps->chroma_qp_offset_list_len_minus1; i++) {
+            ppext->cb_qp_offset_list[i] = pps->cb_qp_offset_list[i];
+            ppext->cr_qp_offset_list[i] = pps->cr_qp_offset_list[i];
+        }
+    }
 }
 
 void ff_dxva2_hevc_fill_scaling_lists(const AVCodecContext *avctx, AVDXVAContext *ctx, DXVA_Qmatrix_HEVC *qm)
@@ -375,7 +405,7 @@ static int dxva2_hevc_start_frame(AVCodecContext *avctx,
     av_assert0(ctx_pic);
 
     /* Fill up DXVA_PicParams_HEVC */
-    ff_dxva2_hevc_fill_picture_parameters(avctx, ctx, &ctx_pic->pp);
+    ff_dxva2_hevc_fill_picture_parameters(avctx, ctx, &ctx_pic->ppext);
 
     /* Fill up DXVA_Qmatrix_HEVC */
     ff_dxva2_hevc_fill_scaling_lists(avctx, ctx, &ctx_pic->qm);
@@ -414,13 +444,15 @@ static int dxva2_hevc_end_frame(AVCodecContext *avctx)
     HEVCContext *h = avctx->priv_data;
     struct hevc_dxva2_picture_context *ctx_pic = h->cur_frame->hwaccel_picture_private;
     int scale = ctx_pic->pp.dwCodingParamToolFlags & 1;
+    int rext = avctx->profile == AV_PROFILE_HEVC_REXT;
     int ret;
 
     if (ctx_pic->slice_count <= 0 || ctx_pic->bitstream_size <= 0)
         return -1;
 
     ret = ff_dxva2_common_end_frame(avctx, h->cur_frame->f,
-                                    &ctx_pic->pp, sizeof(ctx_pic->pp),
+                                    &ctx_pic->pp,
+                                    rext ? sizeof(ctx_pic->ppext) : sizeof(ctx_pic->pp),
                                     scale ? &ctx_pic->qm : NULL, scale ? sizeof(ctx_pic->qm) : 0,
                                     commit_bitstream_and_slice_buffer);
     return ret;
diff --git a/libavcodec/dxva2_internal.h b/libavcodec/dxva2_internal.h
index 224a867ebc..076cb2f8f3 100644
--- a/libavcodec/dxva2_internal.h
+++ b/libavcodec/dxva2_internal.h
@@ -69,6 +69,41 @@
 #include "avcodec.h"
 #include "internal.h"
 
+/* This is only defined starting in the Windows 11 24H2 SDK */
+#pragma pack(push,1)
+typedef struct ff_DXVA_PicParams_HEVC_RangeExt {
+    DXVA_PicParams_HEVC params;
+
+    union {
+        struct {
+            USHORT transform_skip_rotation_enabled_flag    : 1;
+            USHORT transform_skip_context_enabled_flag     : 1;
+            USHORT implicit_rdpcm_enabled_flag             : 1;
+            USHORT explicit_rdpcm_enabled_flag             : 1;
+            USHORT extended_precision_processing_flag      : 1;
+            USHORT intra_smoothing_disabled_flag           : 1;
+            USHORT persistent_rice_adaptation_enabled_flag : 1;
+            USHORT high_precision_offsets_enabled_flag     : 1;
+            USHORT cabac_bypass_alignment_enabled_flag     : 1;
+            USHORT cross_component_prediction_enabled_flag : 1;
+            USHORT chroma_qp_offset_list_enabled_flag      : 1;
+            USHORT ReservedBits8                           : 5;
+        };
+        USHORT dwRangeExtensionFlags;
+    };
+
+    UCHAR diff_cu_chroma_qp_offset_depth;
+    UCHAR log2_sao_offset_scale_luma;
+    UCHAR log2_sao_offset_scale_chroma;
+    UCHAR log2_max_transform_skip_block_size_minus2;
+    CHAR cb_qp_offset_list[6];
+    CHAR cr_qp_offset_list[6];
+    UCHAR chroma_qp_offset_list_len_minus1;
+    USHORT ReservedBits9;
+
+} ff_DXVA_PicParams_HEVC_RangeExt;
+#pragma pack(pop)
+
 typedef void DECODER_BUFFER_DESC;
 
 typedef union {
@@ -171,7 +206,7 @@ void ff_dxva2_h264_fill_picture_parameters(const AVCodecContext *avctx, AVDXVACo
 
 void ff_dxva2_h264_fill_scaling_lists(const AVCodecContext *avctx, AVDXVAContext *ctx, DXVA_Qmatrix_H264 *qm);
 
-void ff_dxva2_hevc_fill_picture_parameters(const AVCodecContext *avctx, AVDXVAContext *ctx, DXVA_PicParams_HEVC *pp);
+void ff_dxva2_hevc_fill_picture_parameters(const AVCodecContext *avctx, AVDXVAContext *ctx, ff_DXVA_PicParams_HEVC_RangeExt *ppext);
 
 void ff_dxva2_hevc_fill_scaling_lists(const AVCodecContext *avctx, AVDXVAContext *ctx, DXVA_Qmatrix_HEVC *qm);
 
diff --git a/libavcodec/hevc/hevcdec.c b/libavcodec/hevc/hevcdec.c
index 0dc24f82f8..d53c9d6ce1 100644
--- a/libavcodec/hevc/hevcdec.c
+++ b/libavcodec/hevc/hevcdec.c
@@ -591,6 +591,10 @@ static enum AVPixelFormat get_format(HEVCContext *s, const HEVCSPS *sps)
 #endif
         break;
     case AV_PIX_FMT_YUV444P:
+#if CONFIG_HEVC_D3D11VA_HWACCEL
+        *fmt++ = AV_PIX_FMT_D3D11VA_VLD;
+        *fmt++ = AV_PIX_FMT_D3D11;
+#endif
 #if CONFIG_HEVC_VAAPI_HWACCEL
         *fmt++ = AV_PIX_FMT_VAAPI;
 #endif
@@ -609,6 +613,10 @@ static enum AVPixelFormat get_format(HEVCContext *s, const HEVCSPS *sps)
         break;
     case AV_PIX_FMT_YUV422P:
     case AV_PIX_FMT_YUV422P10LE:
+#if CONFIG_HEVC_D3D11VA_HWACCEL
+        *fmt++ = AV_PIX_FMT_D3D11VA_VLD;
+        *fmt++ = AV_PIX_FMT_D3D11;
+#endif
 #if CONFIG_HEVC_VAAPI_HWACCEL
        *fmt++ = AV_PIX_FMT_VAAPI;
 #endif
@@ -626,6 +634,10 @@ static enum AVPixelFormat get_format(HEVCContext *s, const HEVCSPS *sps)
     /* NOTE: fallthrough */
     case AV_PIX_FMT_YUV420P12:
     case AV_PIX_FMT_YUV444P12:
+#if CONFIG_HEVC_D3D11VA_HWACCEL
+        *fmt++ = AV_PIX_FMT_D3D11VA_VLD;
+        *fmt++ = AV_PIX_FMT_D3D11;
+#endif
 #if CONFIG_HEVC_VAAPI_HWACCEL
        *fmt++ = AV_PIX_FMT_VAAPI;
 #endif
@@ -640,6 +652,10 @@ static enum AVPixelFormat get_format(HEVCContext *s, const HEVCSPS *sps)
 #endif
         break;
     case AV_PIX_FMT_YUV422P12:
+#if CONFIG_HEVC_D3D11VA_HWACCEL
+        *fmt++ = AV_PIX_FMT_D3D11VA_VLD;
+        *fmt++ = AV_PIX_FMT_D3D11;
+#endif
 #if CONFIG_HEVC_VAAPI_HWACCEL
        *fmt++ = AV_PIX_FMT_VAAPI;
 #endif
-- 
2.43.0.windows.1

