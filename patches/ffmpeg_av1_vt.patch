From 63508efaeef535adb780c2fc81c816063a3862b9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jan=20Ekstr=C3=B6m?= <jeebjp@gmail.com>
Date: Fri, 10 Nov 2023 22:11:44 +0200
Subject: [PATCH 1/2] WIP avcodec/videotoolbox: add AV1 hardware acceleration

---
 configure                     |  4 ++
 libavcodec/Makefile           |  1 +
 libavcodec/av1dec.c           | 10 ++++
 libavcodec/hwaccels.h         |  1 +
 libavcodec/videotoolbox.c     | 14 +++++
 libavcodec/videotoolbox_av1.c | 99 +++++++++++++++++++++++++++++++++++
 libavcodec/vt_internal.h      |  1 +
 7 files changed, 130 insertions(+)
 create mode 100644 libavcodec/videotoolbox_av1.c

diff --git a/configure b/configure
index 86425130bd..ad7c850b8a 100755
--- a/configure
+++ b/configure
@@ -2457,6 +2457,7 @@ TYPES_LIST="
     kCMVideoCodecType_HEVC
     kCMVideoCodecType_HEVCWithAlpha
     kCMVideoCodecType_VP9
+    kCMVideoCodecType_AV1
     kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange
     kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange
     kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange
@@ -3147,6 +3148,8 @@ av1_vaapi_hwaccel_deps="vaapi VADecPictureParameterBufferAV1_bit_depth_idx"
 av1_vaapi_hwaccel_select="av1_decoder"
 av1_vdpau_hwaccel_deps="vdpau VdpPictureInfoAV1"
 av1_vdpau_hwaccel_select="av1_decoder"
+av1_videotoolbox_hwaccel_deps="videotoolbox"
+av1_videotoolbox_hwaccel_select="av1_decoder"
 av1_vulkan_hwaccel_deps="vulkan"
 av1_vulkan_hwaccel_select="av1_decoder"
 h263_vaapi_hwaccel_deps="vaapi"
@@ -6658,6 +6661,7 @@ enabled videotoolbox && {
     check_func_headers CoreMedia/CMFormatDescription.h kCMVideoCodecType_HEVC "-framework CoreMedia"
     check_func_headers CoreMedia/CMFormatDescription.h kCMVideoCodecType_HEVCWithAlpha "-framework CoreMedia"
     check_func_headers CoreMedia/CMFormatDescription.h kCMVideoCodecType_VP9 "-framework CoreMedia"
+    check_func_headers CoreMedia/CMFormatDescription.h kCMVideoCodecType_AV1 "-framework CoreMedia"
     check_func_headers CoreVideo/CVPixelBuffer.h kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange "-framework CoreVideo"
     check_func_headers CoreVideo/CVPixelBuffer.h kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange "-framework CoreVideo"
     check_func_headers CoreVideo/CVPixelBuffer.h kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange "-framework CoreVideo"
diff --git a/libavcodec/Makefile b/libavcodec/Makefile
index 113adb22d5..7d2d56517d 100644
--- a/libavcodec/Makefile
+++ b/libavcodec/Makefile
@@ -1000,6 +1000,7 @@ OBJS-$(CONFIG_AV1_D3D12VA_HWACCEL)        += dxva2_av1.o d3d12va_av1.o
 OBJS-$(CONFIG_AV1_NVDEC_HWACCEL)          += nvdec_av1.o
 OBJS-$(CONFIG_AV1_VAAPI_HWACCEL)          += vaapi_av1.o
 OBJS-$(CONFIG_AV1_VDPAU_HWACCEL)          += vdpau_av1.o
+OBJS-$(CONFIG_AV1_VIDEOTOOLBOX_HWACCEL)   += videotoolbox_av1.o
 OBJS-$(CONFIG_AV1_VULKAN_HWACCEL)         += vulkan_decode.o vulkan_av1.o
 OBJS-$(CONFIG_H263_VAAPI_HWACCEL)         += vaapi_mpeg4.o
 OBJS-$(CONFIG_H263_VIDEOTOOLBOX_HWACCEL)  += videotoolbox.o
diff --git a/libavcodec/av1dec.c b/libavcodec/av1dec.c
index 32c2379a45..d9b94154c1 100644
--- a/libavcodec/av1dec.c
+++ b/libavcodec/av1dec.c
@@ -540,6 +540,7 @@ static int get_pixel_format(AVCodecContext *avctx)
                      CONFIG_AV1_NVDEC_HWACCEL + \
                      CONFIG_AV1_VAAPI_HWACCEL + \
                      CONFIG_AV1_VDPAU_HWACCEL + \
+                     CONFIG_AV1_VIDEOTOOLBOX_HWACCEL + \
                      CONFIG_AV1_VULKAN_HWACCEL)
     enum AVPixelFormat pix_fmts[HWACCEL_MAX + 2], *fmtp = pix_fmts;
 
@@ -567,6 +568,9 @@ static int get_pixel_format(AVCodecContext *avctx)
 #if CONFIG_AV1_VDPAU_HWACCEL
         *fmtp++ = AV_PIX_FMT_VDPAU;
 #endif
+#if CONFIG_AV1_VIDEOTOOLBOX_HWACCEL
+        *fmtp++ = AV_PIX_FMT_VIDEOTOOLBOX;
+#endif
 #if CONFIG_AV1_VULKAN_HWACCEL
         *fmtp++ = AV_PIX_FMT_VULKAN;
 #endif
@@ -591,6 +595,9 @@ static int get_pixel_format(AVCodecContext *avctx)
 #if CONFIG_AV1_VDPAU_HWACCEL
         *fmtp++ = AV_PIX_FMT_VDPAU;
 #endif
+#if CONFIG_AV1_VIDEOTOOLBOX_HWACCEL
+        *fmtp++ = AV_PIX_FMT_VIDEOTOOLBOX;
+#endif
 #if CONFIG_AV1_VULKAN_HWACCEL
         *fmtp++ = AV_PIX_FMT_VULKAN;
 #endif
@@ -1633,6 +1640,9 @@ const FFCodec ff_av1_decoder = {
 #if CONFIG_AV1_VDPAU_HWACCEL
         HWACCEL_VDPAU(av1),
 #endif
+#if CONFIG_AV1_VIDEOTOOLBOX_HWACCEL
+        HWACCEL_VIDEOTOOLBOX(av1),
+#endif
 #if CONFIG_AV1_VULKAN_HWACCEL
         HWACCEL_VULKAN(av1),
 #endif
diff --git a/libavcodec/hwaccels.h b/libavcodec/hwaccels.h
index 5171e4c7d7..2b9bdc8fc9 100644
--- a/libavcodec/hwaccels.h
+++ b/libavcodec/hwaccels.h
@@ -26,6 +26,7 @@ extern const struct FFHWAccel ff_av1_dxva2_hwaccel;
 extern const struct FFHWAccel ff_av1_nvdec_hwaccel;
 extern const struct FFHWAccel ff_av1_vaapi_hwaccel;
 extern const struct FFHWAccel ff_av1_vdpau_hwaccel;
+extern const struct FFHWAccel ff_av1_videotoolbox_hwaccel;
 extern const struct FFHWAccel ff_av1_vulkan_hwaccel;
 extern const struct FFHWAccel ff_h263_vaapi_hwaccel;
 extern const struct FFHWAccel ff_h263_videotoolbox_hwaccel;
diff --git a/libavcodec/videotoolbox.c b/libavcodec/videotoolbox.c
index f4da80640d..45281c8682 100644
--- a/libavcodec/videotoolbox.c
+++ b/libavcodec/videotoolbox.c
@@ -55,6 +55,10 @@ enum { kCMVideoCodecType_HEVC = 'hvc1' };
 enum { kCMVideoCodecType_VP9 = 'vp09' };
 #endif
 
+#if !HAVE_KCMVIDEOCODECTYPE_AV1
+enum { kCMVideoCodecType_AV1 = 'av01' };
+#endif
+
 #define VIDEOTOOLBOX_ESDS_EXTRADATA_PADDING  12
 
 typedef struct VTHWFrame {
@@ -845,6 +849,13 @@ static CFDictionaryRef videotoolbox_decoder_config_create(CMVideoCodecType codec
         if (data)
             CFDictionarySetValue(avc_info, CFSTR("vpcC"), data);
         break;
+#endif
+#if CONFIG_AV1_VIDEOTOOLBOX_HWACCEL
+    case kCMVideoCodecType_AV1 :
+        data = ff_videotoolbox_av1c_extradata_create(avctx);
+        if (data)
+            CFDictionarySetValue(avc_info, CFSTR("av1C"), data);
+        break;
 #endif
     default:
         break;
@@ -911,6 +922,9 @@ static int videotoolbox_start(AVCodecContext *avctx)
     case AV_CODEC_ID_VP9 :
         videotoolbox->cm_codec_type = kCMVideoCodecType_VP9;
         break;
+    case AV_CODEC_ID_AV1 :
+        videotoolbox->cm_codec_type = kCMVideoCodecType_AV1;
+        break;
     default :
         break;
     }
diff --git a/libavcodec/videotoolbox_av1.c b/libavcodec/videotoolbox_av1.c
new file mode 100644
index 0000000000..7f7270c466
--- /dev/null
+++ b/libavcodec/videotoolbox_av1.c
@@ -0,0 +1,99 @@
+/*
+ * Videotoolbox hardware acceleration for AV1
+ * Copyright (c) 2023 Jan Ekstr√∂m
+ *
+ * This file is part of FFmpeg.
+ *
+ * FFmpeg is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * FFmpeg is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with FFmpeg; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ */
+
+#include "libavformat/avio.h"
+#include "libavformat/avio_internal.h"
+#define CALLED_FROM_AVCODEC 1
+#include "libavformat/av1.c"
+#undef CALLED_FROM_AVCODEC
+
+#include "libavutil/avutil.h"
+#include "libavutil/frame.h"
+#include "libavutil/pixfmt.h"
+
+#include "av1dec.h"
+#include "codec_id.h"
+#include "hwaccel_internal.h"
+#include "internal.h"
+#include "vt_internal.h"
+
+CFDataRef ff_videotoolbox_av1c_extradata_create(AVCodecContext *avctx)
+{
+    AVIOContext *pb;
+    uint8_t *buf;
+    CFDataRef data = NULL;
+    int buf_size = 0;
+    int ret = avio_open_dyn_buf(&pb);
+    if (ret < 0)
+        return NULL;
+
+    ret = ff_isom_write_av1c(pb, avctx->extradata, avctx->extradata_size, 1);
+    if (ret < 0)
+        goto fail;
+
+    buf_size = avio_get_dyn_buf(pb, &buf);
+    if (buf_size)
+        data = CFDataCreate(kCFAllocatorDefault, buf, buf_size);
+
+fail:
+    ffio_free_dyn_buf(&pb);
+
+    return data;
+}
+
+static int videotoolbox_av1_start_frame(AVCodecContext *avctx,
+                                        const uint8_t *buffer,
+                                        uint32_t size)
+{
+    return 0;
+}
+
+static int videotoolbox_av1_decode_slice(AVCodecContext *avctx,
+                                         const uint8_t *buffer,
+                                         uint32_t size)
+{
+    VTContext *vtctx = avctx->internal->hwaccel_priv_data;
+
+    return ff_videotoolbox_buffer_copy(vtctx, buffer, size);
+}
+
+static int videotoolbox_av1_end_frame(AVCodecContext *avctx)
+{
+    const AV1DecContext *s = avctx->priv_data;
+    AVFrame *frame = s->cur_frame.f;
+
+    return ff_videotoolbox_common_end_frame(avctx, frame);
+}
+
+const FFHWAccel ff_av1_videotoolbox_hwaccel = {
+    .p.name         = "av1_videotoolbox",
+    .p.type         = AVMEDIA_TYPE_VIDEO,
+    .p.id           = AV_CODEC_ID_AV1,
+    .p.pix_fmt      = AV_PIX_FMT_VIDEOTOOLBOX,
+    .alloc_frame    = ff_videotoolbox_alloc_frame,
+    .start_frame    = videotoolbox_av1_start_frame,
+    .decode_slice   = videotoolbox_av1_decode_slice,
+    .end_frame      = videotoolbox_av1_end_frame,
+    .frame_params   = ff_videotoolbox_frame_params,
+    .init           = ff_videotoolbox_common_init,
+    .uninit         = ff_videotoolbox_uninit,
+    .priv_data_size = sizeof(VTContext),
+};
diff --git a/libavcodec/vt_internal.h b/libavcodec/vt_internal.h
index 9502d7c7dc..427348f206 100644
--- a/libavcodec/vt_internal.h
+++ b/libavcodec/vt_internal.h
@@ -64,6 +64,7 @@ int ff_videotoolbox_h264_decode_slice(AVCodecContext *avctx,
                                       const uint8_t *buffer,
                                       uint32_t size);
 int ff_videotoolbox_common_end_frame(AVCodecContext *avctx, AVFrame *frame);
+CFDataRef ff_videotoolbox_av1c_extradata_create(AVCodecContext *avctx);
 CFDataRef ff_videotoolbox_avcc_extradata_create(AVCodecContext *avctx);
 CFDataRef ff_videotoolbox_hvcc_extradata_create(AVCodecContext *avctx);
 CFDataRef ff_videotoolbox_vpcc_extradata_create(AVCodecContext *avctx);
-- 
2.43.0.windows.1


From 8247214d3426b8f58f7776a1e7f80aea50e32d40 Mon Sep 17 00:00:00 2001
From: Chernenko Ruslan <ractyfree@gmail.com>
Date: Wed, 1 May 2024 14:07:52 +0300
Subject: [PATCH 2/2] avcodec/videotoolbox: av1 decoding not copying the
 sequence header obu into the bitstream

Signed-off-by: Chernenko Ruslan <ractyfree@gmail.com>
Fixed-up-by: Cameron Gutman <aicommander@gmail.com>
---
 libavcodec/videotoolbox_av1.c | 94 ++++++++++++++++++++++++-----------
 1 file changed, 65 insertions(+), 29 deletions(-)

diff --git a/libavcodec/videotoolbox_av1.c b/libavcodec/videotoolbox_av1.c
index 7f7270c466..c808d28006 100644
--- a/libavcodec/videotoolbox_av1.c
+++ b/libavcodec/videotoolbox_av1.c
@@ -19,50 +19,84 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
  */
 
-#include "libavformat/avio.h"
-#include "libavformat/avio_internal.h"
-#define CALLED_FROM_AVCODEC 1
-#include "libavformat/av1.c"
-#undef CALLED_FROM_AVCODEC
 
-#include "libavutil/avutil.h"
-#include "libavutil/frame.h"
-#include "libavutil/pixfmt.h"
+#include "libavutil/mem.h"
 
 #include "av1dec.h"
-#include "codec_id.h"
 #include "hwaccel_internal.h"
 #include "internal.h"
 #include "vt_internal.h"
 
 CFDataRef ff_videotoolbox_av1c_extradata_create(AVCodecContext *avctx)
 {
-    AVIOContext *pb;
-    uint8_t *buf;
-    CFDataRef data = NULL;
-    int buf_size = 0;
-    int ret = avio_open_dyn_buf(&pb);
-    if (ret < 0)
-        return NULL;
+    AV1DecContext *s = avctx->priv_data;
+    avctx->extradata = av_fast_realloc(avctx->extradata,
+                                       &avctx->extradata_size,
+                                       s->seq_data_ref->size + 4);
+    avctx->extradata_size = s->seq_data_ref->size + 4;
+    avctx->extradata[0] = 0x81; // version and marker (constant)
+    avctx->extradata[1] = s->raw_seq->seq_profile << 5 | s->raw_seq->seq_level_idx[0];
+    avctx->extradata[2] = s->raw_seq->seq_tier[0] << 7 |
+                        s->raw_seq->color_config.high_bitdepth << 6 |
+                        s->raw_seq->color_config.twelve_bit << 5 |
+                        s->raw_seq->color_config.mono_chrome << 4 |
+                        s->raw_seq->color_config.subsampling_x << 3 |
+                        s->raw_seq->color_config.subsampling_y << 2 |
+                        s->raw_seq->color_config.chroma_sample_position;
 
-    ret = ff_isom_write_av1c(pb, avctx->extradata, avctx->extradata_size, 1);
-    if (ret < 0)
-        goto fail;
+    if (s->raw_seq->initial_display_delay_present_flag)
+        avctx->extradata[3] = 0 << 5 | s->raw_seq->initial_display_delay_present_flag << 4 | s->raw_seq->initial_display_delay_minus_1[0];
+    else
+        avctx->extradata[3] = 0x00;
+    memcpy(avctx->extradata + 4, s->seq_data_ref->data, s->seq_data_ref->size);
+    CFDataRef data = CFDataCreate(kCFAllocatorDefault, avctx->extradata, avctx->extradata_size);
+    return data;
+};
 
-    buf_size = avio_get_dyn_buf(pb, &buf);
-    if (buf_size)
-        data = CFDataCreate(kCFAllocatorDefault, buf, buf_size);
+static int videotoolbox_av1_decode_params(AVCodecContext *avctx,
+                                         int header_type,
+                                         const uint8_t *buffer,
+                                         uint32_t size)
+{
+    VTContext *vtctx = avctx->internal->hwaccel_priv_data;
+    void *tmp;
 
-fail:
-    ffio_free_dyn_buf(&pb);
+    tmp = av_fast_realloc(vtctx->bitstream,
+                          &vtctx->allocated_size,
+                          size + vtctx->bitstream_size);
 
-    return data;
+    if (!tmp)
+        return AVERROR(ENOMEM);
+
+    vtctx->bitstream = tmp;
+
+    // copy the sequence header obu into the bitstream
+    memcpy(vtctx->bitstream + vtctx->bitstream_size, buffer, size);
+
+    vtctx->bitstream_size += size;
+    return 0;
 }
 
 static int videotoolbox_av1_start_frame(AVCodecContext *avctx,
                                         const uint8_t *buffer,
                                         uint32_t size)
 {
+    VTContext *vtctx = avctx->internal->hwaccel_priv_data;
+    void *tmp;
+
+    tmp = av_fast_realloc(vtctx->bitstream,
+                          &vtctx->allocated_size,
+                          size + vtctx->bitstream_size);
+
+    if (!tmp)
+        return AVERROR(ENOMEM);
+
+    vtctx->bitstream = tmp;
+
+    // copy the frame data into the bitstream
+    memcpy(vtctx->bitstream + vtctx->bitstream_size, buffer, size);
+
+    vtctx->bitstream_size += size;
     return 0;
 }
 
@@ -70,17 +104,18 @@ static int videotoolbox_av1_decode_slice(AVCodecContext *avctx,
                                          const uint8_t *buffer,
                                          uint32_t size)
 {
-    VTContext *vtctx = avctx->internal->hwaccel_priv_data;
-
-    return ff_videotoolbox_buffer_copy(vtctx, buffer, size);
+    return 0;
 }
 
 static int videotoolbox_av1_end_frame(AVCodecContext *avctx)
 {
     const AV1DecContext *s = avctx->priv_data;
+    VTContext *vtctx = avctx->internal->hwaccel_priv_data;
     AVFrame *frame = s->cur_frame.f;
 
-    return ff_videotoolbox_common_end_frame(avctx, frame);
+    int ret =  ff_videotoolbox_common_end_frame(avctx, frame);
+    vtctx->bitstream_size = 0;
+    return ret;
 }
 
 const FFHWAccel ff_av1_videotoolbox_hwaccel = {
@@ -89,6 +124,7 @@ const FFHWAccel ff_av1_videotoolbox_hwaccel = {
     .p.id           = AV_CODEC_ID_AV1,
     .p.pix_fmt      = AV_PIX_FMT_VIDEOTOOLBOX,
     .alloc_frame    = ff_videotoolbox_alloc_frame,
+    .decode_params  = videotoolbox_av1_decode_params,
     .start_frame    = videotoolbox_av1_start_frame,
     .decode_slice   = videotoolbox_av1_decode_slice,
     .end_frame      = videotoolbox_av1_end_frame,
-- 
2.43.0.windows.1

